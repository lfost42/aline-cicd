#!/usr/bin/env groovy
@Library('lib-aline')
def gv

pipeline {
    agent any
    environment {
        APP_PORT = 8072
        SERVICE = 'account'
        SUBNET = 'private'
        APP_NAME = 'lf-aline-account-microservice'
        AWS_ACCESS_KEY_ID = credentials('LF_AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('LF_AWS_SECRET_ACCESS_KEY')
        AWS_ID = credentials('AWS_ID')
        W1_AWS_REGION = credentials('W1_AWS_REGION')
        DB_PASSWORD = credentials('dbp')
        ENCRYPT_SECRET_KEY = credentials('esk')
        JWT_SECRET_KEY = credentials('jsk')
        REGISTRY = "${AWS_ID}.dkr.ecr.${W1_AWS_REGION}.amazonaws.com"
        REPO = "${SERVER}/${APP_NAME}"
    }
    stages {
        stage('sonar') {
            // when { not { branch 'hotfix/**'; branch 'feature/**' } }
            steps {
                script {
                    sonar.mvn()
                }
            }
        }
        stage('quality gate') {
            // when { not { branch 'hotfix/**'; branch 'feature/**' } }
            steps {
                script {
                    qgate()
                }
            }
        }
        stage('build app') {
            // when { not { branch 'hotfix/**'; branch 'feature/**' } }
            steps {
                script {
                    build.mvn()
                }
            }
        }
        stage('image') {
            // when {
            //     expression {
            //         BRANCH_NAME == 'main'
            //     }
            // }
            steps {
                script {
                    image()
                }
            }
        }
        stage('deploy to docker-compose') {
            // when {
            //     expression {
            //         BRANCH_NAME == 'local'
            //     }
            // }
            steps {
                script {
                    // echo 'deploy to local docker-compose'
                    dockercompose()
                }
            }
        }
        stage('deploy to local kubernetes') {
            // when {
            //     expression {
            //         BRANCH_NAME == 'local'
            //     }
            // }
            steps {
                script {
                    // echo 'deploy to local kubernetes'
                    kubernetes()
                }
            }
        }
        stage('deploy to ecs') {
            // when {
            //     expression {
            //         BRANCH_NAME == 'main'
            //     }
            // }
            steps {
                script {
                    echo 'deploy to ecs'
                    ecs()
                }
            }
        }
        stage('deploy to eks') {
            // when {
            //     expression {
            //         BRANCH_NAME == 'main'
            //     }
            // }
            steps {
                script {
                    echo 'deploy to eks'
                    eks()
                }
            }
        }
    }
    post {
        always {
            cleanWs()
            sh 'docker system prune -af --volumes'
        }
    }
}